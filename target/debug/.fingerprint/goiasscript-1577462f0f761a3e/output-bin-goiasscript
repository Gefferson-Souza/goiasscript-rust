{"$message_type":"diagnostic","message":"cannot find function `translate` in module `translator`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1924,"byte_end":1933,"line_start":72,"line_end":72,"column_start":33,"column_end":42,"is_primary":true,"text":[{"text":"    let rust_code = translator::translate(ast)?;","highlight_start":33,"highlight_end":42}],"label":"not found in `translator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function `translate` in module `translator`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:72:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let rust_code = translator::translate(ast)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `translator`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::fs`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/translator.rs","byte_start":4,"byte_end":11,"line_start":1,"line_end":1,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"use std::fs;","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/translator.rs","byte_start":0,"byte_end":13,"line_start":1,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::fs;","highlight_start":1,"highlight_end":13},{"text":"use std::io::{self, Write};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::fs`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/translator.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fs;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/translator.rs","byte_start":27,"byte_end":31,"line_start":2,"line_end":2,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"use std::io::{self, Write};","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/translator.rs","byte_start":27,"byte_end":33,"line_start":2,"line_end":2,"column_start":15,"column_end":21,"is_primary":true,"text":[{"text":"use std::io::{self, Write};","highlight_start":15,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/translator.rs:2:15\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::io::{self, Write};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `PathBuf` and `Path`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/translator.rs","byte_start":57,"byte_end":61,"line_start":3,"line_end":3,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"use std::path::{Path, PathBuf};","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/translator.rs","byte_start":63,"byte_end":70,"line_start":3,"line_end":3,"column_start":23,"column_end":30,"is_primary":true,"text":[{"text":"use std::path::{Path, PathBuf};","highlight_start":23,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/translator.rs","byte_start":41,"byte_end":73,"line_start":3,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::path::{Path, PathBuf};","highlight_start":1,"highlight_end":32},{"text":"use anyhow::{Context, Result};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `PathBuf` and `Path`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/translator.rs:3:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::path::{Path, PathBuf};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Context`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/translator.rs","byte_start":86,"byte_end":93,"line_start":4,"line_end":4,"column_start":14,"column_end":21,"is_primary":true,"text":[{"text":"use anyhow::{Context, Result};","highlight_start":14,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/translator.rs","byte_start":86,"byte_end":95,"line_start":4,"line_end":4,"column_start":14,"column_end":23,"is_primary":true,"text":[{"text":"use anyhow::{Context, Result};","highlight_start":14,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/translator.rs","byte_start":85,"byte_end":86,"line_start":4,"line_end":4,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"use anyhow::{Context, Result};","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/translator.rs","byte_start":101,"byte_end":102,"line_start":4,"line_end":4,"column_start":29,"column_end":30,"is_primary":true,"text":[{"text":"use anyhow::{Context, Result};","highlight_start":29,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Context`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/translator.rs:4:14\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse anyhow::{Context, Result};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/translator.rs","byte_start":7752,"byte_end":8094,"line_start":229,"line_end":234,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                match value {","highlight_start":17,"highlight_end":30},{"text":"                    LiteralValue::String(s) => self.write(&format!(\"\\\"{}\\\"\", s)),","highlight_start":1,"highlight_end":82},{"text":"                    LiteralValue::Number(n) => self.write(&n.to_string()),","highlight_start":1,"highlight_end":75},{"text":"                    LiteralValue::Bool(b) => self.write(if *b { \"true\" } else { \"false\" }),","highlight_start":1,"highlight_end":92},{"text":"                    LiteralValue::Null => self.write(\"None\"),","highlight_start":1,"highlight_end":62},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":"expected `()`, found `Result<(), Error>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/translator.rs","byte_start":7676,"byte_end":15754,"line_start":227,"line_end":380,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match expr {","highlight_start":9,"highlight_end":21},{"text":"            Expression::Literal { value } => {","highlight_start":1,"highlight_end":47},{"text":"                match value {","highlight_start":1,"highlight_end":30},{"text":"                    LiteralValue::String(s) => self.write(&format!(\"\\\"{}\\\"\", s)),","highlight_start":1,"highlight_end":82},{"text":"                    LiteralValue::Number(n) => self.write(&n.to_string()),","highlight_start":1,"highlight_end":75},{"text":"                    LiteralValue::Bool(b) => self.write(if *b { \"true\" } else { \"false\" }),","highlight_start":1,"highlight_end":92},{"text":"                    LiteralValue::Null => self.write(\"None\"),","highlight_start":1,"highlight_end":62},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Expression::Variable { name } => {","highlight_start":1,"highlight_end":47},{"text":"                self.write(name)?;","highlight_start":1,"highlight_end":35},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Expression::Binary { left, operator, right } => {","highlight_start":1,"highlight_end":62},{"text":"                // Caso especial para concatenação de strings","highlight_start":1,"highlight_end":62},{"text":"                if matches!(operator, BinaryOperator::Add) {","highlight_start":1,"highlight_end":61},{"text":"                    // Verificando se estamos em contexto de print","highlight_start":1,"highlight_end":67},{"text":"                    if self.is_printing_context && self.is_string_literal(left) {","highlight_start":1,"highlight_end":82},{"text":"                        // Formato para concatenação no println","highlight_start":1,"highlight_end":64},{"text":"                        if let Expression::Literal { value: LiteralValue::String(s) } = &**left {","highlight_start":1,"highlight_end":98},{"text":"                            self.write(&format!(\"\\\"{}{{}}\\\"\", s))?;","highlight_start":1,"highlight_end":68},{"text":"                            self.write(\", \")?;","highlight_start":1,"highlight_end":47},{"text":"                            self.expression(right)?;","highlight_start":1,"highlight_end":53},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        // Verificar se ambos os lados são do mesmo tipo","highlight_start":1,"highlight_end":73},{"text":"                        let is_left_string = self.is_string_expr(left);","highlight_start":1,"highlight_end":72},{"text":"                        let is_right_string = self.is_string_expr(right);","highlight_start":1,"highlight_end":74},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        // Se pelo menos um dos lados for string, usar concatenação de strings","highlight_start":1,"highlight_end":95},{"text":"                        if is_left_string || is_right_string {","highlight_start":1,"highlight_end":63},{"text":"                            self.write(\"format!(\\\"{}{}\\\", \")?;","highlight_start":1,"highlight_end":63},{"text":"                            self.expression(left)?;","highlight_start":1,"highlight_end":52},{"text":"                            self.write(\", \")?;","highlight_start":1,"highlight_end":47},{"text":"                            self.expression(right)?;","highlight_start":1,"highlight_end":53},{"text":"                            self.write(\")\")?;","highlight_start":1,"highlight_end":46},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            // Operação numérica normal","highlight_start":1,"highlight_end":56},{"text":"                            self.expression(left)?;","highlight_start":1,"highlight_end":52},{"text":"                            self.write(\" + \")?;","highlight_start":1,"highlight_end":48},{"text":"                            self.expression(right)?;","highlight_start":1,"highlight_end":53},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    // Expressão binária normal","highlight_start":1,"highlight_end":48},{"text":"                    self.expression(left)?;","highlight_start":1,"highlight_end":44},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    match operator {","highlight_start":1,"highlight_end":37},{"text":"                        BinaryOperator::Add => self.write(\" + \"),","highlight_start":1,"highlight_end":66},{"text":"                        BinaryOperator::Subtract => self.write(\" - \"),","highlight_start":1,"highlight_end":71},{"text":"                        BinaryOperator::Multiply => self.write(\" * \"),","highlight_start":1,"highlight_end":71},{"text":"                        BinaryOperator::Divide => self.write(\" / \"),","highlight_start":1,"highlight_end":69},{"text":"                        BinaryOperator::Modulo => self.write(\" % \"),","highlight_start":1,"highlight_end":69},{"text":"                        BinaryOperator::Equal => self.write(\" == \"),","highlight_start":1,"highlight_end":69},{"text":"                        BinaryOperator::NotEqual => self.write(\" != \"),","highlight_start":1,"highlight_end":72},{"text":"                        BinaryOperator::Greater => self.write(\" > \"),","highlight_start":1,"highlight_end":70},{"text":"                        BinaryOperator::Less => self.write(\" < \"),","highlight_start":1,"highlight_end":67},{"text":"                        BinaryOperator::GreaterEqual => self.write(\" >= \"),","highlight_start":1,"highlight_end":76},{"text":"                        BinaryOperator::LessEqual => self.write(\" <= \"),","highlight_start":1,"highlight_end":73},{"text":"                        BinaryOperator::And => self.write(\" && \"),","highlight_start":1,"highlight_end":67},{"text":"                        BinaryOperator::Or => self.write(\" || \"),","highlight_start":1,"highlight_end":66},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    self.expression(right)?;","highlight_start":1,"highlight_end":45},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Expression::Call { callee, arguments } => {","highlight_start":1,"highlight_end":56},{"text":"                // Caso especial para ler_escolha() (entrada do usuário)","highlight_start":1,"highlight_end":73},{"text":"                if let Expression::Variable { name } = &**callee {","highlight_start":1,"highlight_end":67},{"text":"                    if name == \"ler_escolha\" {","highlight_start":1,"highlight_end":47},{"text":"                        self.write(\"read_input()\")?;","highlight_start":1,"highlight_end":53},{"text":"                        return Ok(());","highlight_start":1,"highlight_end":39},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Tratamento especial para prosa (println!)","highlight_start":1,"highlight_end":61},{"text":"                if let Expression::Variable { name } = &**callee {","highlight_start":1,"highlight_end":67},{"text":"                    if name == \"prosa\" {","highlight_start":1,"highlight_end":41},{"text":"                        self.is_printing_context = true;","highlight_start":1,"highlight_end":57},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        self.write(\"println!\")?;","highlight_start":1,"highlight_end":49},{"text":"                        self.write(\"(\")?;","highlight_start":1,"highlight_end":42},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        if !arguments.is_empty() {","highlight_start":1,"highlight_end":51},{"text":"                            // Se é uma expressão binária com string + variável","highlight_start":1,"highlight_end":80},{"text":"                            if let Expression::Binary { left, operator: BinaryOperator::Add, right } = &arguments[0] {","highlight_start":1,"highlight_end":119},{"text":"                                if self.is_string_literal(left) {","highlight_start":1,"highlight_end":66},{"text":"                                    // Para \"texto \" mais variável","highlight_start":1,"highlight_end":67},{"text":"                                    if let Expression::Literal { value: LiteralValue::String(s) } = &**left {","highlight_start":1,"highlight_end":110},{"text":"                                        self.write(&format!(\"\\\"{}{{}}\\\"\", s))?;","highlight_start":1,"highlight_end":80},{"text":"                                        self.write(\", \")?;","highlight_start":1,"highlight_end":59},{"text":"                                        self.expression(right)?;","highlight_start":1,"highlight_end":65},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                } else if let Expression::Binary { left: left_inner, operator: BinaryOperator::Add, right: right_inner } = &**left {","highlight_start":1,"highlight_end":149},{"text":"                                    // Para expressões encadeadas como \"texto \" mais variável mais \" mais texto\"","highlight_start":1,"highlight_end":113},{"text":"                                    if self.is_string_literal(left_inner) {","highlight_start":1,"highlight_end":76},{"text":"                                        if let Expression::Literal { value: LiteralValue::String(s) } = &**left_inner {","highlight_start":1,"highlight_end":120},{"text":"                                            self.write(&format!(\"\\\"{}{{}} {{}}\\\"\", s))?;","highlight_start":1,"highlight_end":89},{"text":"                                            self.write(\", \")?;","highlight_start":1,"highlight_end":63},{"text":"                                            self.expression(right_inner)?;","highlight_start":1,"highlight_end":75},{"text":"                                            self.write(\", \")?;","highlight_start":1,"highlight_end":63},{"text":"                                            self.expression(right)?;","highlight_start":1,"highlight_end":69},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    } else {","highlight_start":1,"highlight_end":45},{"text":"                                        // Caso genérico para outras expressões binárias","highlight_start":1,"highlight_end":89},{"text":"                                        self.write(\"\\\"{}\\\"\")?;","highlight_start":1,"highlight_end":63},{"text":"                                        self.write(\", \")?;","highlight_start":1,"highlight_end":59},{"text":"                                        self.expression(&arguments[0])?;","highlight_start":1,"highlight_end":73},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    // Caso genérico para outras expressões binárias","highlight_start":1,"highlight_end":85},{"text":"                                    self.write(\"\\\"{}\\\"\")?;","highlight_start":1,"highlight_end":59},{"text":"                                    self.write(\", \")?;","highlight_start":1,"highlight_end":55},{"text":"                                    self.expression(&arguments[0])?;","highlight_start":1,"highlight_end":69},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else if let Expression::Literal { value: LiteralValue::String(s) } = &arguments[0] {","highlight_start":1,"highlight_end":115},{"text":"                                // String literal simples","highlight_start":1,"highlight_end":58},{"text":"                                self.write(&format!(\"\\\"{}\\\"\", s))?;","highlight_start":1,"highlight_end":68},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                // Outra expressão","highlight_start":1,"highlight_end":51},{"text":"                                self.write(\"\\\"{}\\\"\")?;","highlight_start":1,"highlight_end":55},{"text":"                                self.write(\", \")?;","highlight_start":1,"highlight_end":51},{"text":"                                self.expression(&arguments[0])?;","highlight_start":1,"highlight_end":65},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        self.write(\")\")?;","highlight_start":1,"highlight_end":42},{"text":"                        self.is_printing_context = false;","highlight_start":1,"highlight_end":58},{"text":"                        return Ok(());","highlight_start":1,"highlight_end":39},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Chamadas de função normais","highlight_start":1,"highlight_end":46},{"text":"                self.expression(callee)?;","highlight_start":1,"highlight_end":42},{"text":"                self.write(\"(\")?;","highlight_start":1,"highlight_end":34},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                for (i, arg) in arguments.iter().enumerate() {","highlight_start":1,"highlight_end":63},{"text":"                    if i > 0 {","highlight_start":1,"highlight_end":31},{"text":"                        self.write(\", \")?;","highlight_start":1,"highlight_end":43},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    self.expression(arg)?;","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.write(\")\")?;","highlight_start":1,"highlight_end":34},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Expression::Assignment { name, value } => {","highlight_start":1,"highlight_end":56},{"text":"                // Implementação para expressão de atribuição (contador é valor)","highlight_start":1,"highlight_end":81},{"text":"                self.write(name)?;","highlight_start":1,"highlight_end":35},{"text":"                self.write(\" = \")?;","highlight_start":1,"highlight_end":36},{"text":"                self.expression(value)?;","highlight_start":1,"highlight_end":41},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            _ => {","highlight_start":1,"highlight_end":19},{"text":"                self.write(\"/* expressão não implementada */\")?;","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"expected this to be `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected unit type `()`\n        found enum `Result<(), anyhow::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/translator.rs","byte_start":8094,"byte_end":8094,"line_start":234,"line_end":234,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"                }","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/translator.rs","byte_start":15754,"byte_end":15754,"line_start":380,"line_end":380,"column_start":10,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":10,"highlight_end":10}],"label":null,"suggested_replacement":";","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"you might have meant to return this value","code":null,"level":"help","spans":[{"file_name":"src/translator.rs","byte_start":7752,"byte_end":7752,"line_start":229,"line_end":229,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                match value {","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"return ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"use the `?` operator to extract the `Result<(), anyhow::Error>` value, propagating a `Result::Err` value to the caller","code":null,"level":"help","spans":[{"file_name":"src/translator.rs","byte_start":8094,"byte_end":8094,"line_start":234,"line_end":234,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"                }","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":"?","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/translator.rs:229:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   match expr {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       Expression::Literal { value } => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m           match value {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m               LiteralValue::String(s) => self.write(&format!(\"\\\"{}\\\"\", s)),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m               LiteralValue::Number(n) => self.write(&n.to_string()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m               LiteralValue::Bool(b) => self.write(if *b { \"true\" } else { \"false\" }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m               LiteralValue::Null => self.write(\"None\"),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m           }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_______________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<(), Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m380\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected this to be `()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<(), anyhow::Error>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                }\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m380\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        }\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to return this value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mreturn \u001b[0m\u001b[0mmatch value {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the `?` operator to extract the `Result<(), anyhow::Error>` value, propagating a `Result::Err` value to the caller\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                }\u001b[0m\u001b[0m\u001b[38;5;10m?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/translator.rs","byte_start":10049,"byte_end":10993,"line_start":273,"line_end":287,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    match operator {","highlight_start":21,"highlight_end":37},{"text":"                        BinaryOperator::Add => self.write(\" + \"),","highlight_start":1,"highlight_end":66},{"text":"                        BinaryOperator::Subtract => self.write(\" - \"),","highlight_start":1,"highlight_end":71},{"text":"                        BinaryOperator::Multiply => self.write(\" * \"),","highlight_start":1,"highlight_end":71},{"text":"                        BinaryOperator::Divide => self.write(\" / \"),","highlight_start":1,"highlight_end":69},{"text":"                        BinaryOperator::Modulo => self.write(\" % \"),","highlight_start":1,"highlight_end":69},{"text":"                        BinaryOperator::Equal => self.write(\" == \"),","highlight_start":1,"highlight_end":69},{"text":"                        BinaryOperator::NotEqual => self.write(\" != \"),","highlight_start":1,"highlight_end":72},{"text":"                        BinaryOperator::Greater => self.write(\" > \"),","highlight_start":1,"highlight_end":70},{"text":"                        BinaryOperator::Less => self.write(\" < \"),","highlight_start":1,"highlight_end":67},{"text":"                        BinaryOperator::GreaterEqual => self.write(\" >= \"),","highlight_start":1,"highlight_end":76},{"text":"                        BinaryOperator::LessEqual => self.write(\" <= \"),","highlight_start":1,"highlight_end":73},{"text":"                        BinaryOperator::And => self.write(\" && \"),","highlight_start":1,"highlight_end":67},{"text":"                        BinaryOperator::Or => self.write(\" || \"),","highlight_start":1,"highlight_end":66},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":"expected `()`, found `Result<(), Error>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected unit type `()`\n        found enum `Result<(), anyhow::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use the `?` operator to extract the `Result<(), anyhow::Error>` value, propagating a `Result::Err` value to the caller","code":null,"level":"help","spans":[{"file_name":"src/translator.rs","byte_start":10993,"byte_end":10993,"line_start":287,"line_end":287,"column_start":22,"column_end":22,"is_primary":true,"text":[{"text":"                    }","highlight_start":22,"highlight_end":22}],"label":null,"suggested_replacement":"?","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/translator.rs","byte_start":10993,"byte_end":10993,"line_start":287,"line_end":287,"column_start":22,"column_end":22,"is_primary":true,"text":[{"text":"                    }","highlight_start":22,"highlight_end":22}],"label":null,"suggested_replacement":";","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/translator.rs:273:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    match operator {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m274\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        BinaryOperator::Add => self.write(\" + \"),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        BinaryOperator::Subtract => self.write(\" - \"),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        BinaryOperator::Multiply => self.write(\" * \"),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        BinaryOperator::Or => self.write(\" || \"),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<(), Error>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<(), anyhow::Error>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the `?` operator to extract the `Result<(), anyhow::Error>` value, propagating a `Result::Err` value to the caller\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    }\u001b[0m\u001b[0m\u001b[38;5;10m?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    }\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Write`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/translator.rs","byte_start":33,"byte_end":38,"line_start":2,"line_end":2,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"use std::io::{self, Write};","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Write`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/translator.rs:2:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::io::{self, Write};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors; 5 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors; 5 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0308, E0425.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0425.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
